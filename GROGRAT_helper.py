import numpy as np
import datetime
import sys
sys.path.append('/home/r/Robert.Reichert/juwave')
from juwave.units import ur

def read_ray_paths(filename, get_reftime=False):
    """
    Descriptions:
    This function is a basic reading routine for the ray_paths (grograt output) files, that
    returns an array containing a dict for every ray which in turn contains all datapoints
    generated by the raytracer (rays[#ray][data][datapoint], e.g. data[0]["lon"][2] returns
    the lon data for the 3. datapoint of the first ray).

    Parameters
    ----------
    filename        : path and name of ray_path file

    Keywords
    --------
    get_reftime     : if True, the script will return the reference time given in the ray paths
                      file as a second return value

    Returns
    -------
    rays            : list of dicts containing the data for each ray
                      (rays[#ray][data][datapoint], e.g. rays[0]["lon"][2]
                      returns the lon data for the 3. datapoint of the first ray)
    """

    def append_ray(ray_list, ray_data):
        if ray_data["stop_reason_code"] in [-6, -3, 14]:
            for var in data_names:
                ray_data[var] = ray_data[var][:-1]
        # if the last value is still unreasonable, remove it:
        if len(ray_data["z"]) > 1:
            if abs(ray_data["xmmflx"][-1]) > 10 * abs(ray_data["xmmflx"][-2]):
                for var in data_names:
                    ray_data[var] = ray_data[var][:-1]
        for var, unit in zip(data_names, units):
            ray_data[var] = unit * np.asarray(ray_data[var])
        ray_list.append(ray_data)

    full_filename = filename
    if ".ray_paths" not in str(filename) and ".raypaths" not in str(filename):
        full_filename = str(filename) + ".ray_paths"

    if get_reftime:
        ref_time = None

    rays = []
    ray = None
    with open(full_filename, "r") as rf:
        # skip the header and check whether the file has the new file format
        data = rf.readlines()
    data = [x_.replace("\n", "") for x_ in data]

    if data[1][:18] == "File generated on ":
        ref_time = datetime.datetime(2000, 1, 1) + datetime.timedelta(seconds=int(data[2].split()[3]))
        data_start_idx = 6
    else:
        data_start_idx = 4

    data_names = data[data_start_idx - 2].split()
    for i, name in enumerate(data_names):
        name = name.replace("long", "lon")
        name = name.replace("unsat.vel", "unsatvel")
        name = name.replace("sat.vel", "satvel")
        name = name.replace("N^2", "N2")
        data_names[i] = name
    # check units
    units = data[data_start_idx - 1]
    units = [_x.strip().lstrip("[") for _x in units.split("]")]
    units = [_x for _x in units if len(_x) > 0]
    for i, unit in enumerate(units):
        unit = unit.replace("deg e", "degree_east")
        unit = unit.replace("deg n", "degree_north")
        unit = unit.replace("-", "dimensionless")
        units[i] = unit
    units = [ur(x_) for x_ in units]

    for data_row in data[data_start_idx:]:
        # start new dict for new ray data:
        split_data = data_row.split()
        if split_data[0] in ["NaN", "-Infinity"]:
            # skip line if there are NaN values
            continue
        elif "." not in split_data[0]:
            # append the last ray to ray_list after adding units
            if isinstance(ray, dict):
                append_ray(rays, ray)
            ray = {}
            ray["ray_id"] = int(split_data[0])
            ray["stop_reason"] = " ".join(split_data[3:-1])
            ray["stop_reason_code"] = int(split_data[-1])
            for var in data_names:
                ray[var] = []
        else:
            assert len(split_data) == len(data_names)
            for var, val in zip(data_names, split_data):
                ray[var].append(float(val))
    # append the last ray dict befort returning after adding units
    append_ray(rays, ray)

    if get_reftime:
        return rays, ref_time
    else:
        return rays
